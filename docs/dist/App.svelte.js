import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	null_to_empty,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../snowpack/pkg/svelte/internal.js";

import TitleScreen from "./Components/Menus/TitleScreen.svelte.js";
import { UserDisplayName } from "./stores.js";
import { initializeApp } from "../snowpack/pkg/firebase/app.js";

import {
	getAuth,
	signInWithPopup,
	GoogleAuthProvider,
	signInAnonymously,
	signOut,
	deleteUser
} from "../snowpack/pkg/firebase/auth.js";

import { getDatabase, ref, set, get, remove, child } from "../snowpack/pkg/firebase/database.js";
import { getAnalytics } from "../snowpack/pkg/firebase/analytics.js";
import "../snowpack/pkg/svelte.js";
import { createPopper } from "../snowpack/pkg/@popperjs/core.js";

function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Sign In";
			attr(button, "class", "signin svelte-t0921d");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			/*button_binding*/ ctx[13](button);

			if (!mounted) {
				dispose = listen(button, "click", /*toggleSignInModal*/ ctx[7]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			/*button_binding*/ ctx[13](null);
			mounted = false;
			dispose();
		}
	};
}

// (127:4) {#if username != ""}
function create_if_block_1(ctx) {
	let t0;
	let t1;
	let div;
	let a;
	let div_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			t0 = text(/*username*/ ctx[5]);
			t1 = space();
			div = element("div");
			a = element("a");
			a.textContent = "Sign Out";
			attr(a, "class", "dropdownbutton svelte-t0921d");
			attr(div, "id", "accDrop");
			attr(div, "class", div_class_value = "" + (null_to_empty(/*accDropShow*/ ctx[0] ? "block" : "hidden") + " svelte-t0921d"));
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, a);
			/*div_binding*/ ctx[12](div);

			if (!mounted) {
				dispose = listen(a, "click", /*logout*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*username*/ 32) set_data(t0, /*username*/ ctx[5]);

			if (dirty & /*accDropShow*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*accDropShow*/ ctx[0] ? "block" : "hidden") + " svelte-t0921d"))) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			/*div_binding*/ ctx[12](null);
			mounted = false;
			dispose();
		}
	};
}

// (144:2) {#if showSignInModal}
function create_if_block(ctx) {
	let div2;
	let div0;
	let t0;
	let span;
	let t2;
	let div1;
	let btn0;
	let t4;
	let btn1;
	let t6;
	let div3;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text("Sign In\n        ");
			span = element("span");
			span.textContent = "Ã—";
			t2 = space();
			div1 = element("div");
			btn0 = element("btn");

			btn0.innerHTML = `<img class="oauth-icon svelte-t0921d" alt="Google sign-in" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png"/>
          Login With Google`;

			t4 = space();
			btn1 = element("btn");

			btn1.innerHTML = `<img class="oauth-icon svelte-t0921d" alt="Github sign-in" src="https://upload.wikimedia.org/wikipedia/commons/1/11/Cc-by_new_white.svg"/>
          Login With Google`;

			t6 = space();
			div3 = element("div");
			attr(span, "aria-hidden", "true");
			attr(div0, "class", "signInModalHeader svelte-t0921d");
			attr(btn0, "class", "oauthBtn svelte-t0921d");
			attr(btn1, "class", "oauthBtn svelte-t0921d");
			attr(div1, "class", "signInModalContent");
			attr(div2, "class", "signInModalWrapper svelte-t0921d");
			attr(div3, "class", "preventative-div svelte-t0921d");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div0, span);
			append(div2, t2);
			append(div2, div1);
			append(div1, btn0);
			append(div1, t4);
			append(div1, btn1);
			insert(target, t6, anchor);
			insert(target, div3, anchor);

			if (!mounted) {
				dispose = [
					listen(span, "click", /*toggleSignInModal*/ ctx[7]),
					listen(btn0, "click", /*loginGoogle*/ ctx[11]),
					listen(btn1, "click", /*loginAnon*/ ctx[10])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching) detach(t6);
			if (detaching) detach(div3);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let switch_instance;
	let t1;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*username*/ ctx[5] != "") return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	var switch_value = /*Menus*/ ctx[6][currentMenu];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let if_block1 = /*showSignInModal*/ ctx[4] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			attr(div0, "id", "userStub");
			attr(div0, "class", "svelte-t0921d");
			attr(div1, "class", "screen svelte-t0921d");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_block0.m(div0, null);
			/*div0_binding*/ ctx[14](div0);
			append(div1, t0);

			if (switch_instance) {
				mount_component(switch_instance, div1, null);
			}

			append(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", /*toggleAccDrop*/ ctx[8]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div0, null);
				}
			}

			if (switch_value !== (switch_value = /*Menus*/ ctx[6][currentMenu])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div1, t1);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				
			}

			if (/*showSignInModal*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_block0.d();
			/*div0_binding*/ ctx[14](null);
			if (switch_instance) destroy_component(switch_instance);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

var currentMenu = 0;

function instance($$self, $$props, $$invalidate) {
	const firebaseConfig = {
		apiKey: "AIzaSyC_hobr42NEOA46_O-YWYSoXfZgQvTIJa0",
		authDomain: "tabletalkproj.firebaseapp.com",
		projectId: "tabletalkproj",
		storageBucket: "tabletalkproj.appspot.com",
		messagingSenderId: "550808021827",
		appId: "1:550808021827:web:88c295a1c72ff68b885df6",
		measurementId: "G-ER3VK8XS20"
	};

	const Menus = [TitleScreen];
	const app = initializeApp(firebaseConfig);
	const database = getDatabase();
	const google = new GoogleAuthProvider();
	const auth = getAuth();
	let player;
	let playerID;
	let playerAnonStatus;
	let playerAvatarURL;
	let playerRef;

	auth.onAuthStateChanged(user => {
		console.log(user);

		if (user) {
			player = user;
			playerID = user.uid;
			playerRef = ref(database, "players/" + playerID);

			if (user.isAnonymous == true) {
				set(playerRef, { name: "Anon" });
				playerAnonStatus = true;
			} else {
				get(child(playerRef, "name")).then(snapshot => {
					set(playerRef, { name: user.displayName });
				});

				playerAnonStatus = false;
			}

			if (playerAvatarURL) {
				playerAvatarURL = user.photoURL;
			}

			get(child(playerRef, "name")).then(snapshot => {
				UserDisplayName.set(snapshot.val());
			});
		}
	});

	const analytics = getAnalytics(app);
	let accDropShow = false;
	let stubRef;
	let accDropRef;
	let signInBtn;
	let showSignInModal = false;

	function toggleSignInModal() {
		$$invalidate(4, showSignInModal = !showSignInModal);
	}

	const toggleAccDrop = () => {
		accState: {
			if (signInBtn) {
				break accState;
			}

			if (accDropShow) {
				$$invalidate(0, accDropShow = false);
			} else {
				$$invalidate(0, accDropShow = true);
				createPopper(stubRef, accDropRef, { placement: "bottom-start" });
			}
		}
	};

	const logout = () => {
		if (playerAnonStatus) {
			deleteUser(player);
			remove(playerRef);
		}

		signOut(auth).then(() => {
			UserDisplayName.set("");
		}).catch(error => {
			console.log(error);
		});
	};

	const loginAnon = () => {
		signInAnonymously(auth);
		toggleSignInModal();
	};

	const loginGoogle = () => {
		signInWithPopup(auth, google).then(result => {
			// This gives you a Google Access Token. You can use it to access the Google API.
			const credential = GoogleAuthProvider.credentialFromResult(result);

			const token = credential.accessToken;

			// The signed-in user info.
			const user = result.user;
		}).catch(error => {
			// Handle Errors here.
			const errorCode = error.code;

			const errorMessage = error.message;

			// The email of the user's account used.
			const email = error.customData.email;

			// The AuthCredential type that was used.
			const credential = GoogleAuthProvider.credentialFromError(error);
		});

		toggleSignInModal();
	};

	var username = "";

	UserDisplayName.subscribe(value => {
		$$invalidate(5, username = value);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			accDropRef = $$value;
			$$invalidate(2, accDropRef);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			signInBtn = $$value;
			$$invalidate(3, signInBtn);
		});
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			stubRef = $$value;
			$$invalidate(1, stubRef);
		});
	}

	return [
		accDropShow,
		stubRef,
		accDropRef,
		signInBtn,
		showSignInModal,
		username,
		Menus,
		toggleSignInModal,
		toggleAccDrop,
		logout,
		loginAnon,
		loginGoogle,
		div_binding,
		button_binding,
		div0_binding
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;