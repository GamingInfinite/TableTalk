/* src/Components/Menus/LobbyList.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_block,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../snowpack/pkg/svelte/internal.js";

import {
	Screen,
	UserDisplayName,
	db,
	playerID,
	lobbiesRef,
	lobbyRef,
	lobbyPlayerRef
} from "../../stores.js";

import { ref, set, get, push } from "../../../snowpack/pkg/firebase/database.js";
import Fa from "../../../snowpack/pkg/svelte-fa.js";

import {
	faSquarePlus,
	faArrowsRotate
} from "../../../snowpack/pkg/@fortawesome/free-solid-svg-icons/index.es.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (86:2) {#if showLobbyCreateModal}
function create_if_block(ctx) {
	let div9;
	let div8;
	let div0;
	let t0;
	let button0;
	let t2;
	let div7;
	let div6;
	let div1;
	let label0;
	let t4;
	let input0;
	let input0_placeholder_value;
	let t5;
	let div2;
	let label1;
	let t7;
	let input1;
	let t8;
	let div5;
	let button1;
	let div3;
	let fa;
	let t9;
	let div4;
	let t11;
	let div10;
	let current;
	let mounted;
	let dispose;
	fa = new Fa({ props: { icon: faSquarePlus } });

	return {
		c() {
			div9 = element("div");
			div8 = element("div");
			div0 = element("div");
			t0 = text("New Lobby\n          ");
			button0 = element("button");
			button0.innerHTML = `<span aria-hidden="true">×</span>`;
			t2 = space();
			div7 = element("div");
			div6 = element("div");
			div1 = element("div");
			label0 = element("label");
			label0.textContent = "Lobby Name";
			t4 = space();
			input0 = element("input");
			t5 = space();
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "Lobby Password";
			t7 = space();
			input1 = element("input");
			t8 = space();
			div5 = element("div");
			button1 = element("button");
			div3 = element("div");
			create_component(fa.$$.fragment);
			t9 = space();
			div4 = element("div");
			div4.textContent = "Submit";
			t11 = space();
			div10 = element("div");
			attr(button0, "class", "p-1 ml-auto bg-transparent border-0 text-black opacity-2 float-right text-3xl leading-none font-semibold outline-none focus:outline-none");
			attr(div0, "class", "flex items-start justify-between p-5 border-b border-solid border-blueGray-200 rounded-t text-4xl");
			attr(label0, "for", "ln");
			attr(input0, "type", "text");
			attr(input0, "placeholder", input0_placeholder_value = /*$UserDisplayName*/ ctx[4] + "'s Lobby");
			attr(input0, "name", "ln");
			attr(input0, "class", "px-3 py-3 placeholder-blueGray-300 text-blueGray-600 relative bg-white bg-white rounded text-sm shadow outline-none focus:outline-none focus:shadow-outline w-full inline-flex");
			attr(div1, "class", "my-2");
			attr(label1, "for", "lp");
			attr(input1, "type", "text");
			attr(input1, "placeholder", "Optional");
			attr(input1, "name", "lp");
			attr(input1, "class", "px-3 py-3 placeholder-blueGray-300 text-blueGray-600 relative bg-white bg-white rounded text-sm shadow outline-none focus:outline-none focus:shadow-outline w-full inline-flex");
			attr(div2, "class", "my-2");
			attr(div3, "class", "inline-flex");
			attr(div4, "class", "inline-flex");
			attr(button1, "class", "bg-emerald-400 text-white active:bg-emerald-500 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150");
			attr(div5, "class", "justify-center flex");
			attr(div6, "class", "mb-3 pt-0 text-sm text-left");
			attr(div7, "class", "relative p-6 flex-auto");
			attr(div8, "class", "relative w-auto my-6 mx-auto max-w-3xl bg-slate-50 rounded-md");
			attr(div9, "class", "overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none justify-center items-center flex");
			attr(div10, "class", "opacity-25 fixed inset-0 z-40 bg-black");
		},
		m(target, anchor) {
			insert(target, div9, anchor);
			append(div9, div8);
			append(div8, div0);
			append(div0, t0);
			append(div0, button0);
			append(div8, t2);
			append(div8, div7);
			append(div7, div6);
			append(div6, div1);
			append(div1, label0);
			append(div1, t4);
			append(div1, input0);
			set_input_value(input0, /*lobbyname*/ ctx[1]);
			append(div6, t5);
			append(div6, div2);
			append(div2, label1);
			append(div2, t7);
			append(div2, input1);
			set_input_value(input1, /*lobbypass*/ ctx[2]);
			append(div6, t8);
			append(div6, div5);
			append(div5, button1);
			append(button1, div3);
			mount_component(fa, div3, null);
			append(button1, t9);
			append(button1, div4);
			insert(target, t11, anchor);
			insert(target, div10, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*toggleLobbyCreateModal*/ ctx[5]),
					listen(input0, "input", /*input0_input_handler*/ ctx[9]),
					listen(input1, "input", /*input1_input_handler*/ ctx[10]),
					listen(button1, "click", /*createLobby*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*$UserDisplayName*/ 16 && input0_placeholder_value !== (input0_placeholder_value = /*$UserDisplayName*/ ctx[4] + "'s Lobby")) {
				attr(input0, "placeholder", input0_placeholder_value);
			}

			if (dirty & /*lobbyname*/ 2 && input0.value !== /*lobbyname*/ ctx[1]) {
				set_input_value(input0, /*lobbyname*/ ctx[1]);
			}

			if (dirty & /*lobbypass*/ 4 && input1.value !== /*lobbypass*/ ctx[2]) {
				set_input_value(input1, /*lobbypass*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div9);
			destroy_component(fa);
			if (detaching) detach(t11);
			if (detaching) detach(div10);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (145:2) {#each lobbyList as lobby (lobby.id)}
function create_each_block(key_1, ctx) {
	let div2;
	let div0;
	let t0_value = /*lobby*/ ctx[15].name + "";
	let t0;
	let t1;
	let div1;
	let t2_value = /*lobby*/ ctx[15].players + "";
	let t2;
	let t3;

	return {
		key: key_1,
		first: null,
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			attr(div2, "class", "bg-white rounded-2xl w-1/2 flex justify-around mx-2 my-3");
			this.first = div2;
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
			append(div2, t3);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*lobbyList*/ 8 && t0_value !== (t0_value = /*lobby*/ ctx[15].name + "")) set_data(t0, t0_value);
			if (dirty & /*lobbyList*/ 8 && t2_value !== (t2_value = /*lobby*/ ctx[15].players + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let fa;
	let t4;
	let t5;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;

	fa = new Fa({
			props: { icon: faArrowsRotate, size: "lg" }
		});

	let if_block = /*showLobbyCreateModal*/ ctx[0] && create_if_block(ctx);
	let each_value = /*lobbyList*/ ctx[3];
	const get_key = ctx => /*lobby*/ ctx[15].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "×";
			t1 = space();
			button1 = element("button");
			button1.textContent = "New Lobby";
			t3 = space();
			button2 = element("button");
			create_component(fa.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(button0, "class", "text-white font-bold uppercase text-sm px-6 py-3 rounded-l-lg shadow hover:shadow-lg outline-none focus:outline-none mb-1 bg-red-600 active:bg-red-800 ease-linear transition-all duration-150");
			attr(button1, "class", "text-white font-bold uppercase text-sm px-6 py-3 shadow hover:shadow-lg outline-none focus:outline-none mb-1 bg-black active:bg-neutral-800 ease-linear transition-all duration-150");
			attr(button2, "class", "text-white font-bold uppercase text-sm px-6 py-3 rounded-r-lg shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 bg-emerald-400 active:bg-emerald-500 ease-linear transition-all duration-150");
			attr(div0, "class", "z-10 flex absolute ml-2 mt-2");
			attr(div1, "class", "flex justify-center text-xl flex-wrap");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, button0);
			append(div0, t1);
			append(div0, button1);
			append(div0, t3);
			append(div0, button2);
			mount_component(fa, button2, null);
			append(div0, t4);
			if (if_block) if_block.m(div0, null);
			insert(target, t5, anchor);
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[8]),
					listen(button1, "click", /*toggleLobbyCreateModal*/ ctx[5]),
					listen(button2, "click", /*refreshLobbies*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showLobbyCreateModal*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showLobbyCreateModal*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*lobbyList*/ 8) {
				each_value = /*lobbyList*/ ctx[3];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_component(fa);
			if (if_block) if_block.d();
			if (detaching) detach(t5);
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $db;
	let $UserDisplayName;
	let $lobbyPlayerRef;
	let $lobbiesRef;
	let $playerID;
	component_subscribe($$self, db, $$value => $$invalidate(11, $db = $$value));
	component_subscribe($$self, UserDisplayName, $$value => $$invalidate(4, $UserDisplayName = $$value));
	component_subscribe($$self, lobbyPlayerRef, $$value => $$invalidate(12, $lobbyPlayerRef = $$value));
	component_subscribe($$self, lobbiesRef, $$value => $$invalidate(13, $lobbiesRef = $$value));
	component_subscribe($$self, playerID, $$value => $$invalidate(14, $playerID = $$value));
	let showLobbyCreateModal = false;
	let lobbyname = $UserDisplayName + "'s Lobby";
	let lobbypass = "";
	let lobbyList = [];

	function toggleLobbyCreateModal() {
		$$invalidate(0, showLobbyCreateModal = !showLobbyCreateModal);
	}

	function createLobby() {
		Screen.set(2);
		lobbiesRef.set(push(ref($db, "lobbies/")));
		lobbyRef.set(ref($db, "lobbies/" + $lobbiesRef.key));
		lobbyPlayerRef.set(ref($db, "lobbies/" + $lobbiesRef.key + "/players/" + $playerID));
		set($lobbiesRef, { name: lobbyname, pass: lobbypass });
		set($lobbyPlayerRef, { name: $UserDisplayName, host: true });
	}

	function refreshLobbies() {
		$$invalidate(3, lobbyList = []);

		get(ref($db, "lobbies")).then(snapshot => {
			let lobbyJson = snapshot.toJSON();
			let lobbyKeys = Object.keys(lobbyJson);

			lobbyKeys.sort(function (a, b) {
				return a == b ? 0 : a > b ? 1 : -1;
			});

			let lobbyNames = [];
			let playerCounts = [];
			let passwords = [];

			for (let i = 0; i < lobbyKeys.length; i++) {
				const element = lobbyKeys[i];
				let lobbyName = lobbyJson[element].name;
				lobbyNames.push(lobbyName);
				let playerCount = Object.keys(lobbyJson[element].players).length;
				playerCounts.push(playerCount);
				let password = lobbyJson[element].pass;
				passwords.push(password);
			}

			for (let i = 0; i < lobbyKeys.length; i++) {
				let lobby = { id: "", name: "", players: 0, pass: "" };
				lobby.id = lobbyKeys[i];
				lobby.name = lobbyNames[i];
				lobby.players = playerCounts[i];
				lobby.pass = passwords[i];
				lobbyList.push(lobby);
			}

			$$invalidate(3, lobbyList);
		}).catch(error => {
			console.log("No Lobbies");
			console.log(error);
		});
	}

	refreshLobbies();

	const click_handler = () => {
		Screen.set(0);
	};

	function input0_input_handler() {
		lobbyname = this.value;
		$$invalidate(1, lobbyname);
	}

	function input1_input_handler() {
		lobbypass = this.value;
		$$invalidate(2, lobbypass);
	}

	return [
		showLobbyCreateModal,
		lobbyname,
		lobbypass,
		lobbyList,
		$UserDisplayName,
		toggleLobbyCreateModal,
		createLobby,
		refreshLobbies,
		click_handler,
		input0_input_handler,
		input1_input_handler
	];
}

class LobbyList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default LobbyList;